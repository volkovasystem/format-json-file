!function(global,factory){if("function"==typeof define&&define.amd)define([],factory);else if("undefined"!=typeof exports)factory();else{factory(),global.formatJsonFile={}}}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:this,(function(){"use strict";const fs=require("fs"),util=require("util"),fsAsync=fs.promises,JSON_FILE_EXTENSION_PATTERN=/\.json$/;module.exports=async function(filePath){try{if("string"==typeof filePath&&filePath.length>5&&!0===(await fsAsync.stat(filePath)).isFile()&&!0===JSON_FILE_EXTENSION_PATTERN.test(filePath)){const JSONFileContent=await fsAsync.readFile(filePath);return await fsAsync.writeFile(filePath,JSON.stringify(JSON.parse(JSONFileContent),null,"\t")),!0}throw new Error(["#invalid-json-file;","cannot format json file","json file invalid"])}catch(error){throw new Error(["#cannot-format-json-file;","cannot execute format json file","@error-data: "+util.inspect(error)])}}}));